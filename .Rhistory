# Chunk 82
na_count <- rowSums(is.na(data))
data[na_count == 4, ]
# Chunk 83
na_count <- rowSums(is.na(data))
data[na_count == 3, ]
# Chunk 84
na_count <- rowSums(is.na(data))
data[na_count == 2, ]
# Chunk 85
na_count <- rowSums(is.na(data))
data[na_count >= 1, ]
# Chunk 86
na_count <- rowSums(is.na(data))
nrow(data[na_count >= 1, ]) / nrow(data)
na_count_save1 <- rowSums(is.na(data_save_1))
nrow(data_save_1[na_count_save1 >= 1, ]) / nrow(data_save_1)
# Chunk 87
sum(is.na(data))
sum(is.na(data))/(nrow(data)*ncol(data))
# Chunk 88
data_sans_bur <- data[, -which(names(data) == "code_bur_vote")]
sum(is.na(data_sans_bur)) / (nrow(data_sans_bur) * ncol(data_sans_bur))
# Comparaison des circonscriptions
#----- Différence base sûre -----
sum(!data_full$circonscription == data_save_2$circonscription, na.rm = TRUE)
#----- Résultat des remplacements -----
diff_cir <- data$circonscription == data_full$circonscription
sum(diff_cir, na.rm = TRUE)/nrow(data) #bons en %
sum(!diff_cir, na.rm = TRUE)/nrow(data) #mauvais en %
sum(!diff_cir, na.rm = TRUE) #mauvais en valeur
sum(!diff_cir, na.rm = TRUE)/sum(is.na(data_save_1$circonscription)) #base NA
sum(is.na(diff_cir))/nrow(data) #na en %
sum(is.na(diff_cir)) #na en valeur
sum(is.na(diff_cir))/sum(is.na(data_save_1$circonscription)) #base NA
# Comparaison des communes
#----- Différence base sûre -----
sum(!data_full$nom_commune == data_save_2$nom_commune, na.rm = TRUE)
#----- Résultat des remplacements -----
diff_com <- data$nom_commune == data_full$nom_commune
sum(diff_com, na.rm = TRUE)/nrow(data) #bons en %
sum(!diff_com, na.rm = TRUE)/nrow(data) #mauvais en %
sum(!diff_com, na.rm = TRUE) #mauvais en valeur
sum(!diff_com, na.rm = TRUE)/sum(is.na(data_save_1$nom_commune)) #base NA
sum(is.na(diff_com))/nrow(data) #na en %
sum(is.na(diff_com)) #na en valeur
sum(is.na(diff_com))/sum(is.na(data_save_1$code_bur_vote)) #base NA
# Comparaison des codes de bureaux de vote
#----- Différence base sûre -----
sum(!data_full$code_bur_vote == data_save_2$code_bur_vote, na.rm = TRUE)
#----- Résultat des remplacements -----
diff_bur <- data$code_bur_vote == data_full$code_bur_vote
sum(diff_bur, na.rm = TRUE)/nrow(data) #bons en %
sum(!diff_bur, na.rm = TRUE)/nrow(data) #mauvais en %
sum(!diff_bur, na.rm = TRUE) #mauvais en valeur
sum(!diff_bur, na.rm = TRUE)/sum(is.na(data_save_1$code_bur_vote)) #base NA
sum(is.na(diff_bur))/nrow(data) #na en %
sum(is.na(diff_bur)) #na en valeur
sum(is.na(diff_bur))/sum(is.na(data_save_1$code_bur_vote)) #base NA
# Comparaison des inscrits
#----- Différence base sûre -----
sum(!data_full$inscrits == data_save_2$inscrits, na.rm = TRUE)
#----- Résultat des remplacements -----
diff_insc <- data$inscrits == data_full$inscrits
sum(diff_insc, na.rm = TRUE)/nrow(data) #bons en %
sum(!diff_insc, na.rm = TRUE)/nrow(data) #mauvais en %
sum(!diff_insc, na.rm = TRUE) #mauvais en valeur
sum(!diff_insc, na.rm = TRUE)/sum(is.na(data_save_1$inscrits)) #base NA
sum(is.na(diff_insc))/nrow(data) #na en %
sum(is.na(diff_insc)) #na en valeur
sum(is.na(diff_insc))/sum(is.na(data_save_1$inscrits)) #base NA
comp_insc <- abs(data$inscrits - data_full$inscrits) <= 0.05*data_full$inscrits
sum(comp_insc, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_insc, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_insc, na.rm = TRUE) #mauvais en valeur
sum(!comp_insc, na.rm = TRUE)/sum(is.na(data_save_1$inscrits)) #base NA
sum(is.na(comp_insc)) / nrow(data) #na en %
sum(is.na(comp_insc)) #na en valeur
sum(is.na(comp_insc))/sum(is.na(data_save_1$inscrits)) #base NA
# Comparaison des taux d'absence
comp_abs <- abs(data$tx_absents - data_full$tx_absents) <=
0.05*data_full$tx_absents
sum(comp_abs, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_abs, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_abs, na.rm = TRUE) #mauvais en valeur
sum(!comp_abs, na.rm = TRUE)/sum(is.na(data_save_1$tx_absents)) #base NA
sum(is.na(comp_abs)) / nrow(data) #na en %
sum(is.na(comp_abs)) #na en valeur
sum(is.na(comp_abs))/sum(is.na(data_save_1$tx_absents)) #base NA
# Comparaison des taux de votants
comp_pres <- abs(data$tx_votants - data_full$tx_votants) <=
0.05*data_full$tx_votants
sum(comp_pres, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_pres, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_pres, na.rm = TRUE) #mauvais en valeur
sum(!comp_pres, na.rm = TRUE)/sum(is.na(data_save_1$tx_votants)) #base NA
sum(is.na(comp_pres)) / nrow(data) #na en %
sum(is.na(comp_pres)) #na en valeur
sum(is.na(comp_pres))/sum(is.na(data_save_1$tx_votants)) #base NA
# Comparaison des taux de votes blancs
comp_bla <- abs(data$tx_blancs - data_full$tx_blancs) <=
0.05*data_full$tx_blancs
sum(comp_bla, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_bla, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_bla, na.rm = TRUE) #mauvais en valeur
sum(!comp_bla, na.rm = TRUE)/sum(is.na(data_save_1$tx_blancs)) #base NA
sum(is.na(comp_bla)) / nrow(data) #na en %
sum(is.na(comp_bla)) #na en valeur
sum(is.na(comp_bla))/sum(is.na(data_save_1$tx_blancs)) #base NA
# Comparaison des taux de votes nuls
comp_nul <- abs(data$tx_nuls - data_full$tx_nuls) <=
0.05*data_full$tx_nuls
sum(comp_nul, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_nul, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_nul, na.rm = TRUE) #mauvais en valeur
sum(!comp_nul, na.rm = TRUE)/sum(is.na(data_save_1$tx_nuls)) #base NA
sum(is.na(comp_nul)) / nrow(data) #na en %
sum(is.na(comp_nul)) #na en valeur
sum(is.na(comp_nul))/sum(is.na(data_save_1$tx_nuls)) #base NA
# Comparaison des taux de votes exprimés
comp_exp <- abs(data$tx_exprimes - data_full$tx_exprimes) <=
0.05*data_full$tx_exprimes
sum(comp_exp, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_exp, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_exp, na.rm = TRUE) #mauvais en valeur
sum(!comp_exp, na.rm = TRUE)/sum(is.na(data_save_1$tx_exprimes)) #base NA
sum(is.na(comp_exp)) / nrow(data) #na en %
sum(is.na(comp_exp)) #na en valeur
sum(is.na(comp_exp))/sum(is.na(data_save_1$tx_exprimes)) #base NA
# Comparaison des latitudes
comp_lat <- abs(data$latitude - data_full$latitude) <=
0.005*data_full$latitude
sum(comp_lat, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_lat, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_lat, na.rm = TRUE) #mauvais en valeur
sum(!comp_lat, na.rm = TRUE)/sum(is.na(data_save_1$latitude)) #base NA
sum(is.na(comp_lat)) / nrow(data) #na en %
sum(is.na(comp_lat)) #na en valeur
sum(is.na(comp_lat))/sum(is.na(data_save_1$latitude)) #base NA
# Comparaison des longitudes
comp_long <- abs(data$longitude - data_full$longitude) <=
0.005*abs(data_full$longitude) #les coordonnées de longitude sont négatives
sum(comp_long, na.rm = TRUE) / nrow(data) #bons en %
sum(!comp_long, na.rm = TRUE) / nrow(data) #mauvais en %
sum(!comp_long, na.rm = TRUE) #mauvais en valeur
sum(!comp_long, na.rm = TRUE)/sum(is.na(data_save_1$longitude)) #base NA
sum(is.na(comp_long)) / nrow(data) #na en %
sum(is.na(comp_long)) #na en valeur
sum(is.na(comp_long))/sum(is.na(data_save_1$longitude)) #base NA
# Inscrits & circonscription
data |>
ggplot() +
aes(x = circonscription, y = inscrits, color = circonscription) +
geom_violin(scale = "width", alpha = 0.5) +
geom_boxplot(width = 0.1, alpha = 0.7, outlier.shape = NA) +
geom_jitter(alpha = 0.4, width = 0.2) +
theme_minimal() +
scale_colour_manual(
values = couleurs_circonscription
) +
labs(x = "Circonscription",
y = "Nombre d'inscrits",
color = "Circonscription") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Chunk 1
setwd("C:/Users/Djayan/Desktop/Projet Biostat Rendu")
# Chunk 2
library(readxl)
library(writexl)
library(dplyr)
library(purrr)
library(ggplot2)
library(geosphere)
library(FNN)
library(mice)
library(corrplot)
# Chunk 3
options(digits = 15)
data_vote <- read_excel("data/Données votes.xlsx")
data_geo <- read.csv("data/Données géographiques.csv")
# Chunk 4
data_vote <- data_vote[data_vote$`Code du département` == "44", ]
data_full <- data_vote[,c(4:8,10,12,15,18,21)]
colnames(data_full)[1:10] = c("circonscription", #circonscription rattachement
"code_commune", #numéro de commune dans le département
"nom_commune", #nom de la commune
"code_bur_vote", #numéro du bureau de vote
"inscrits", #nombre d'inscrits
"tx_absents", #taux d'absents (nb absents / nb inscrits)
"tx_votants", #taux votants (nb votants / nb inscrits)
"tx_blancs", #taux votes blancs (nb blancs / nb votants)
"tx_nuls", #taux votes nuls (nb votes nuls / nb votants)
"tx_exprimes" #taux votes exprimés (nb exp / nb votants)
)
data_geo <- data_geo[data_geo$code_departement == "44", ]
data_geo <- data_geo[,c(6:8)]
# Retirer les lignes devenues doublons en retirant les variables
data_geo <- unique(data_geo)
# Convertir les colonnes pour avoir un format homogène
data_full$code_commune <- as.integer(data_full$code_commune)
# Associer la longitude et latitude avec les communes
data_full <- merge(data_full, data_geo,
by.x = "code_commune",
by.y = "code_commune")
data_full <- data_full[,-1] #retirer la ligne "Code de la commune"
# Chunk 5
str(data_full)
data_full$circonscription <- as.factor(data_full$circonscription)
data_full$nom_commune <- as.factor(data_full$nom_commune)
data_full$code_bur_vote <- as.integer(data_full$code_bur_vote)
data_full$inscrits <- as.numeric(data_full$inscrits)
# Chunk 6
# Chemin complet
chemin_fichier <- file.path("data", "Données complètes.xlsx")
# Enregistrer le fichier Excel dans le dossier data
write_xlsx(
x = data_full,
path = chemin_fichier,
col_names = TRUE,
format_headers = TRUE
)
# Chunk 7
data_full <- read_excel("data/Données complètes.xlsx")
# Chunk 8
data_proj_1 <- data_full
n_row <- nrow(data_proj_1) #nombre de lignes
n_col <- ncol(data_proj_1) #nombre de lignes
n_obs <- round(n_row*n_col*0.20) # 20% du nombre de lignes
# Créer des paires de lignes et colonnes uniques
combinaisons_possibles <- expand.grid(ligne = 1:n_row, colonne = 1:n_col)
paires_distinctes <- combinaisons_possibles[
sample(1:nrow(combinaisons_possibles), n_obs), ]
# Mettre des NA
data_proj_1 <- as.matrix(data_proj_1)
data_proj_1[cbind(paires_distinctes[, 1], paires_distinctes[, 2])] <- NA
sum(is.na(data_proj_1))/(n_row*n_col) # bon %
# Chunk 9
# Chemin complet
chemin_fichier <- file.path("data", "Données projet.xlsx")
# Enregistrer le fichier Excel dans le dossier data
# /!\ Ne pas tirer les # sinon la base va changer /!\
##write_xlsx(
##  x = data_proj_1,
##  path = chemin_fichier,
##  col_names = TRUE,
##  format_headers = TRUE
##)
data_save_1 <- read_excel("data/Données projet.xlsx")
# Chunk 10
data <- read_excel("data/Données projet.xlsx")
str(data)
data$circonscription <- as.factor(data$circonscription)
data$nom_commune <- as.factor(data$nom_commune)
data$code_bur_vote <- as.factor(data$code_bur_vote)
head(data)
# Chunk 11
summary(data)
# Chunk 12
# Bar plot pour la variable "circonscription"
ggplot(data, aes(x = circonscription)) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Répartition des Circonscriptions",
x = "Circonscription",
y = "Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Bar plot pour la variable "nom_commune"
ggplot(data, aes(x = nom_commune)) +
geom_bar(fill = "blue", color = "black") +
labs(title = "Répartition des Communes",
x = "Commune",
y = "Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Bar plot pour la variable "code_bur_vote"
## Remplacer les valeurs NA par une catégorie "bureau NA" dans la colonne `code_bur_vote`
data_mod <- data |>
mutate(code_bur_vote = ifelse(is.na(code_bur_vote), "bureau NA",
as.character(code_bur_vote)))
## Créer la variable 'group_bur_vote' avec les intervalles de 5 manquantes
data_mod <- data_mod |>
mutate(group_bur_vote = cut(as.numeric(code_bur_vote),
breaks = seq(0,
max(as.numeric(code_bur_vote),
na.rm = TRUE), by = 5),
include.lowest = TRUE,
labels = paste(
seq(1, floor(
max(as.numeric(code_bur_vote),
na.rm = TRUE) / 5)),
"à", seq(5,
floor(max(as.numeric(code_bur_vote),
na.rm = TRUE) / 5) * 5,
by = 5), sep = " ")))
data_mod$group_bur_vote[is.na(data_mod$code_bur_vote)] <- "bureau NA"
## Visualisation avec ggplot
ggplot(data_mod, aes(x = group_bur_vote)) +
geom_bar(fill = "blue", color = "black") +
labs(title =
"Répartition des Codes des Bureaux de Vote (par intervalles de 5)",
x = "Intervalle de Codes Bureau de Vote", y = "Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Histogrammes et Boxplots pour les variables liées aux inscrits
# Histogramme des inscrits
ggplot(data, aes(x=inscrits)) +
geom_histogram(binwidth = 50, fill="blue", color="black") +
labs(title="Histogramme des inscrits", x="Inscrits", y="Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le nombre d'inscrits
ggplot(data, aes(x = "", y = inscrits)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des inscrits", y="Nombre d'inscrits") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables liées aux taux d'absents
# Histogramme des taux d'absents
ggplot(data, aes(x=tx_absents)) +
geom_histogram(binwidth = 1, fill="blue", color="black") +
labs(title="Histogramme des taux d'absents", x="Taux d'absents", y="Fréquence") +
xlim(0, 75) +  # Limiter les valeurs de l'axe X
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le taux d'abstention
ggplot(data, aes(x = "", y = tx_absents)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des taux d'abstention", y="Taux d'abstention") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables liées aux taux de votants
# Histogramme des taux de votants
ggplot(data, aes(x=tx_votants)) +
geom_histogram(binwidth = 1, fill="blue", color="black", alpha=0.7) +
labs(title="Histogramme des taux de votants", x="Taux de votants", y="Fréquence") +
xlim(0, 100) +  # Limiter les valeurs de l'axe X
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le taux de votants
ggplot(data, aes(x = "", y = tx_votants)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des taux de votants", y="Taux de votants") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables liées aux taux de blancs
# Histogramme des taux de blancs
ggplot(data, aes(x=tx_blancs)) +
geom_histogram(binwidth = 1, fill="blue", color="black") +
labs(title="Histogramme des taux de blancs", x="Taux de blancs", y="Fréquence") +
xlim(0, 100) +  # Limiter les valeurs de l'axe X
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le taux de blancs
ggplot(data, aes(x = "", y = tx_blancs)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des taux de blancs", y="Taux de blancs") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables liées aux taux de nuls
# Histogramme des taux de nuls
ggplot(data, aes(x=tx_nuls)) +
geom_histogram(binwidth = 0.1, fill="blue", color="black") +
labs(title="Histogramme des taux de nuls", x="Taux de nuls", y="Fréquence") +
xlim(0, 5) +  # Limiter les valeurs de l'axe X
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le taux de nuls
ggplot(data, aes(x = "", y = tx_nuls)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des taux de nuls", y="Taux de nuls") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables liées aux taux exprimés
# Histogramme des taux exprimés
ggplot(data, aes(x=tx_exprimes)) +
geom_histogram(binwidth = 1, fill="blue", color="black") +
labs(title="Histogramme des taux exprimés", x="Taux exprimés", y="Fréquence") +
xlim(0, 100) +  # Limiter les valeurs de l'axe X
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour le taux exprimé
ggplot(data, aes(x = "", y = tx_exprimes)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des taux exprimés", y="Taux exprimés") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les variables géographiques
# Histogramme des latitudes
ggplot(data, aes(x=latitude)) +
geom_histogram(binwidth = 0.1, fill="blue", color="black") +
labs(title="Histogramme des latitudes", x="Latitude", y="Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour la latitude
ggplot(data, aes(x = "", y = latitude)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des latitudes", y="Latitude") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Histogrammes et Boxplots pour les longitudes
# Histogramme des longitudes
ggplot(data, aes(x=longitude)) +
geom_histogram(binwidth = 0.1, fill="blue", color="black") +
labs(title="Histogramme des longitudes", x="Longitude", y="Fréquence") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Boxplot pour la longitude
ggplot(data, aes(x = "", y = longitude)) +
geom_boxplot(fill="blue", color="black") +
labs(title="Boîte à moustaches des longitudes", y="Longitude") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
# Chunk 13
data_quanti <- data |>
select_if(is.numeric)
cor_data <- cor(data_quanti,use="complete.obs",method = c("pearson"))
corrplot(cor_data,
method = "circle",
type = "upper",
col = colorRampPalette(c("blue", "white", "red"))(200),
tl.col = "black",
tl.srt = 45,
addCoef.col = "black",
number.cex = 0.7,
diag = FALSE,
)
# Chunk 14
# Circonscription & bureau de votes
data |>
count(circonscription, code_bur_vote) |>
ggplot() +
aes(x = circonscription, y = code_bur_vote, fill = n) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "Circonscription",
y = "Code Bureau de Vote",
fill = "Nombre de bureaux") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
# Chunk 15
# Circonscription & noms de commune
data |>
count(circonscription, nom_commune) |>
ggplot() +
aes(x = circonscription, y = nom_commune, fill = n) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "Circonscription",
y = "nom_commune",
fill = "Nombre de bureaux") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
# Chunk 16
# Nom de communes & bureau de votes
data |>
count(code_bur_vote, nom_commune) |>
ggplot() +
aes(x = code_bur_vote, y = nom_commune, fill = n) +
geom_tile() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
labs(x = "code_bur_vote",
y = "nom_commune",
fill = "Nombre de bureaux") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 8),
plot.title = element_text(hjust = 0.5)
)
couleurs_circonscription <- c(
"black", "blue", "green", "purple", "orange",
"yellow", "cyan", "pink", "brown", "grey"
)
# Inscrits & circonscription
data |>
ggplot() +
aes(x = circonscription, y = inscrits, color = circonscription) +
geom_violin(scale = "width", alpha = 0.5) +
geom_boxplot(width = 0.1, alpha = 0.7, outlier.shape = NA) +
geom_jitter(alpha = 0.4, width = 0.2) +
theme_minimal() +
scale_colour_manual(
values = couleurs_circonscription
) +
labs(x = "Circonscription",
y = "Nombre d'inscrits",
color = "Circonscription") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Latitude & circonscription
data |>
ggplot() +
aes(x = circonscription, y = latitude, color = circonscription) +
geom_violin(scale = "width", alpha = 0.5) +
geom_boxplot(width = 0.1, alpha = 0.7, outlier.shape = NA) +
geom_jitter(alpha = 0.4, width = 0.2) +
theme_minimal() +
scale_colour_manual(
values = couleurs_circonscription
) +
labs(x = "Circonscription", y = "Latitude", color = "Circonscription") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
